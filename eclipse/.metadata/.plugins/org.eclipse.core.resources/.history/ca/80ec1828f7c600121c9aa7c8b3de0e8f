package wintermute.core;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.io.*;
import java.net.*;
import java.util.*;

import wintermute.wikipedia.WikiObj;
import wintermute.wolfram.WolframObj;

import com.google.gson.Gson;

public class Wintermute {
	
	public String apiKey = "LXY739-7LAEYLYV67";
	public WolframObj theWolfram;
	public HashMap<String, WikiObj> wikiList = new HashMap<String, WikiObj>();
	
	public Wintermute()
	{
		this.theWolfram = new WolframObj(this.apiKey);
		wikiList.put("wikipedia", new WikiObj("en.wikipedia.org"));
	}
	
	public Wintermute(WolframObj wolframParam)
	{
		this.theWolfram = wolframParam;
		wikiList.put("wikipedia", new WikiObj("en.wikipedia.org"));
	}
	
	public Wintermute(String wikiURL)
	{
		this.theWolfram = new WolframObj(this.apiKey);
		wikiList.put("wikipedia", new WikiObj(wikiURL));
	}
	
	public void addWiki(String name, String wikiURL)
	{
		wikiList.put(name, new WikiObj(wikiURL));
	}
	
	public void addWikiByName(String name)
	{
		String google = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=";
	    String charset = "UTF-8";

	    URL url;
	    Reader reader = null;
		try {
			url = new URL(google + URLEncoder.encode(name, charset));
			reader = new InputStreamReader(url.openStream(), charset);
		} catch (Exception e) {
			e.printStackTrace();
		}
	    GoogleResults results = new Gson().fromJson(reader, GoogleResults.class);
	    
		wikiList.put(name, new WikiObj(results.getResponseData().getResults().get(0).getUrl().substring(7, results.getResponseData().getResults().get(0).getUrl().length()-1)));
		System.out.println(results.getResponseData().getResults().get(0).getUrl().substring(7, results.getResponseData().getResults().get(0).getUrl().length()-1));
	}
	
	public void addWikiByName(String name, String scriptPath)
	{
		String google = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=";
	    String charset = "UTF-8";

	    URL url;
	    Reader reader = null;
		try {
			url = new URL(google + URLEncoder.encode(name, charset));
			reader = new InputStreamReader(url.openStream(), charset);
		} catch (Exception e) {
			e.printStackTrace();
		}
	    GoogleResults results = new Gson().fromJson(reader, GoogleResults.class);
	    
		wikiList.put(name, new WikiObj(results.getResponseData().getResults().get(0).getUrl().substring(7, results.getResponseData().getResults().get(0).getUrl().length()-1), scriptPath));
		System.out.println(results.getResponseData().getResults().get(0).getUrl().substring(7, results.getResponseData().getResults().get(0).getUrl().length()-1));
	}
	
	public WikiObj getWiki(String name)
	{
		return wikiList.get(name);
	}
	
		public String formatWikitext(String wikiText)
		{
			String revise = wikiText.replace("\n", "");
			System.out.println("[]");
			while(revise.contains("[") || revise.contains("]"))
			{
				if(revise.substring(0, revise.indexOf("]]")).contains("[[")){
					String subRevise = revise.substring(revise.indexOf("[[")+2, revise.indexOf("]]"))/*.replace("[", "").replace("]", "")*/;
					if(subRevise.contains("|") && subRevise.indexOf("|") == subRevise.lastIndexOf("|"))
					{
						String goodRevise = subRevise.substring(subRevise.indexOf("|")).replace("|", "");
						revise = revise.replace("[["+subRevise+"]]", goodRevise);
					}else
					if(subRevise.indexOf("|") == subRevise.lastIndexOf("|"))
					{
						revise = revise.replace("[["+subRevise+"]]", subRevise);
					}else
					{
						revise = revise.replace("[["+subRevise+"]]", "");
					}
				}else
				{
					if(!revise.substring(0, revise.indexOf("]")).contains("["))
						revise = revise.replace(revise.substring(0, revise.indexOf("]")+2), revise.substring(0, revise.indexOf("]")+2).replace("[", "").replace("]", ""));
				}
			}
			System.out.println("{}");
			while(revise.contains("{") || revise.contains("}"))
			{
				System.out.println(revise);
				System.out.println(revise.substring(0, revise.indexOf("}")).contains("{"));
				if(revise.contains("}"))
					if(!revise.substring(0, revise.indexOf("}")).contains("{"))
						revise = revise.replace(revise.substring(revise.indexOf("|"), revise.indexOf("}")+2),"");
				System.out.println(revise.replace(revise.substring(revise.indexOf("|"), revise.indexOf("}")+2),""));
				String subRevise = revise.substring(revise.indexOf("{")+2, revise.indexOf("}"));
				System.err.println(subRevise);
				revise = revise.replace("{{"+subRevise+"}}", "");
			}
			System.out.println("<>");
			while(revise.contains("<") || revise.contains(">"))
			{
				if(revise.contains(">"))
					if(!revise.substring(0, revise.indexOf(">")).contains("<"))
						revise = revise.replace(revise.substring(0, revise.indexOf(">")+1), revise.substring(0, revise.indexOf(">")+2).replace("<", "").replace(">", ""));
				String subRevise = revise.substring(revise.indexOf("<")+1, revise.indexOf(">"));
				revise = revise.replace("<"+subRevise+">", "");
			}
			return revise.replace("'", "").replace("[", "").replace("]", "").replace("\"", "").replace("{", "").replace("}", "").replace("<", "").replace(">", "");
		}

	
	public static String getClipboard()
	{
		try {
			return (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}

class GoogleResults {

    private ResponseData responseData;
    public ResponseData getResponseData() { return responseData; }
    public void setResponseData(ResponseData responseData) { this.responseData = responseData; }
    public String toString() { return "ResponseData[" + responseData + "]"; }

    static class ResponseData {
        private List<Result> results;
        public List<Result> getResults() { return results; }
        public void setResults(List<Result> results) { this.results = results; }
        public String toString() { return "Results[" + results + "]"; }
    }

    static class Result {
        private String url;
        private String title;
        public String getUrl() { return url; }
        public String getTitle() { return title; }
        public void setUrl(String url) { this.url = url; }
        public void setTitle(String title) { this.title = title; }
        public String toString() { return "Result[url:" + url +",title:" + title + "]"; }
    }

}
