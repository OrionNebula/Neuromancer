package neuromancer.voice;

import java.io.File;

import neuromancer.core.Neuromancer;

import org.jaudiotagger.tag.FieldKey;

import wintermute.core.Wintermute;
import wintermute.data.*;
import wintermute.music.MP3;
import wintermute.wikipedia.WikiObj;


public class VoiceActor {
	
	public static void act(String input) throws Exception
	{
		System.out.println("Acting on \""+input+"\"");
		String[] cutInput = RefinedVoice.cut(input, " ");
		//Get the first verb's location in the array
		int verbLoc = findFirst(input, "verb");
		String actionGuess = cutInput[verbLoc];
		System.out.println(actionGuess);
		switch(actionGuess.toLowerCase())
		{
		case "retrieve":
			WikiObj searchWiki;
			if(cutInput[verbLoc+2].toLowerCase().equals("wikipedia"))
				searchWiki = Neuromancer.wintermute.getWiki("wikipedia");
			else{
				Neuromancer.wintermute.addWikiByName(cutInput[verbLoc+2]+" wiki");
				searchWiki = Neuromancer.wintermute.getWiki(cutInput[verbLoc+2]+" wiki");
			}
			Neuromancer.nodes.put(cutInput[verbLoc+1], new NodeWiki(Neuromancer.wintermute.getArticle(searchWiki, cutInput[verbLoc+1]), cutInput[verbLoc+2], cutInput[verbLoc+1], 0));
			Neuromancer.nodes.get(cutInput[verbLoc+1]).store(Neuromancer.theSet.setPath+"/"+cutInput[verbLoc+1]+".node");
			Neuromancer.speechSynth.speak(cutInput[verbLoc+2]+"'s article on "+cutInput[verbLoc+1]+" stored within data set "+Neuromancer.theSet.setName);
			break;
		//Make a node do whatever it is it does
		case "activate":
			String useType = cutInput[verbLoc+1];
			String mName = input.substring(input.indexOf(cutInput[verbLoc+2]),input.length()).toString();
			switch(useType.toLowerCase())
			{
			case "music":
				NodeMusic musicNode = (NodeMusic)Neuromancer.nodes.get(mName);
				if(musicNode == null)
				{
					Neuromancer.speechSynth.speak(mName+" could not be played. Was it initialized?");
					break;
				}
				//Neuromancer.nodes.get(mName)
				MP3 tmpFile = new MP3(new File(musicNode.path));
				if(!tmpFile.audioTags.getFirst(FieldKey.ARTIST).equals(""))
					Neuromancer.speechSynth.speak("Playing "+tmpFile.title+" by "+tmpFile.audioTags.getFirst(FieldKey.ARTIST));
				else
					Neuromancer.speechSynth.speak("Playing "+tmpFile.title);
				Thread.sleep(2000);
				MP3.play(tmpFile);
				break;
			case "wiki":
				NodeWiki wikiNode = (NodeWiki)Neuromancer.nodes.get(mName);
				Neuromancer.wintermute.writeStringFile(new File(mName+".txt"), wikiNode.storedSection);
				Neuromancer.speechSynth.speak(wikiNode.wikiName+"'s article on "+wikiNode.articleName+" written to "+wikiNode.articleName+".txt");
				break;
			}
			break;
		//Say the specified node outloud
		case "say":
			String sayType = cutInput[verbLoc+1];
			String sName = input.substring(input.indexOf(cutInput[verbLoc+1]),input.length()).toString();
			switch(sayType.toLowerCase())
			{
			case "music":
				NodeMusic sayMusic = (NodeMusic)Neuromancer.nodes.get(sName);
				Neuromancer.speechSynth.speak(sayMusic.nodeName+" represents "+(new File(sayMusic.path)).getName()+", or "+(new MP3(new File(sayMusic.path))).title);
				break;
			case "wiki":
				NodeWiki sayWiki = ((NodeWiki)Neuromancer.nodes.get(sName));
				if(sayWiki == null)
				{
					Neuromancer.speechSynth.speak(sName+" could not be dictated. Was it initialized?");
					break;
				}
				Neuromancer.speechSynth.speak("Dictating "+sayWiki.wikiName+"'s article on "+sayWiki.articleName+". "+sayWiki.storedSection);
				break;
			}
			break;
		//Stop everything
		case "terminate":
			ExecutionFacilitator.kill("espeak.exe");
			MP3.stop();
			Thread.sleep(500);
			Neuromancer.speechSynth.speak("Stopped.");
			break;
		//Change operating directory
		case "operate":
			String oName = input.substring(input.indexOf(cutInput[verbLoc+1]),input.length());
			Neuromancer.theSet = DataSet.load(oName+".dataset");
			Neuromancer.speechSynth.speak("Now operating within dataset "+oName);
			break;
		//Exit the app
		case "exit":
			Neuromancer.speechSynth.speak("Exit command recieved. Goodbye!");
			System.out.println("Will now exit!");
			System.exit(0);
			break;
		//Create a new node
		case "create":
			String type = cutInput[verbLoc+1];
			String name = input.substring(input.indexOf(cutInput[verbLoc+2]),input.length());
			Node tmpNode = null;
			DataSet tmpSet = null;
			switch(type.toLowerCase())
			{
			case "music":
				tmpNode = new NodeMusic(Wintermute.getClipboard());
				break;
			case "file":
				tmpNode = new NodeFile(Wintermute.getClipboard());
				break;
			case "image":
				tmpNode = new NodeImage(Wintermute.getClipboard());
				break;
			case "plaintext":
				tmpNode = new NodePlaintext(Wintermute.getClipboard());
				break;
			case "text":
				tmpNode = new NodePlaintext(Wintermute.getClipboard());
				break;
			case "wiki":
				tmpNode = new NodeWiki(Wintermute.getClipboard());
				break;
			case "set":
				tmpSet = new DataSet(Wintermute.getClipboard(),name);
				break;
			case "dataset":
				tmpSet = new DataSet(Wintermute.getClipboard(),name);
				break;
			default:
			}
			if(tmpNode != null){
				tmpNode.nodeName = name;
				tmpNode.store(Neuromancer.theSet.setPath+"/"+name+".node");
				Neuromancer.speechSynth.speak(type+" node "+name+" created with clipboard contents");
				break;
			}
			if(tmpSet != null)
			{
				tmpSet.store(name+".dataset");
				Neuromancer.speechSynth.speak("Data set "+name+" created with clipboard contents");
				break;
			}
			
			break;
		//Load a node into the HashMap
		case "add":
			Node theNode = null;
			String gName = input.substring(input.indexOf(cutInput[verbLoc+2]),input.length());
			switch(cutInput[verbLoc+1].toLowerCase())
			{
			case "music":
				theNode = (NodeMusic)Node.load(Neuromancer.theSet.setPath+"/"+gName+".node");
				break;
			case "file":
				tmpNode = theNode = (NodeFile)Node.load(Neuromancer.theSet.setPath+"/"+gName+".node");
				break;
			case "image":
				tmpNode = theNode = (NodeImage)Node.load(Neuromancer.theSet.setPath+"/"+gName+".node");
				break;
			case "plaintext":
				tmpNode = theNode = (NodePlaintext)Node.load(Neuromancer.theSet.setPath+"/"+gName+".node");
				break;
			case "text":
				tmpNode = theNode = (NodePlaintext)Node.load(Neuromancer.theSet.setPath+"/"+gName+".node");
				break;
			case "wiki":
				tmpNode = theNode = (NodeWiki)Node.load(Neuromancer.theSet.setPath+"/"+gName+".node");
				break;
			}
			System.out.println("Bringing "+gName+".node into memory");
			System.out.println(gName);
			Neuromancer.nodes.put(gName, theNode);
			String nodeType = theNode.nodeType;
			Neuromancer.speechSynth.speak("Initialized "+nodeType+" "+gName);
			break;
		//No verbs here!
		case "":
			System.err.println("[ACT] No verbs were found! Malformed input?");
			Neuromancer.speechSynth.speak("I didn't understand your input.");
			break;
		//List all nodes within the current session
		case "list":
			String dirNodes = "";
			String activeNodes = "";
			File[] theFiles = new File(Neuromancer.theSet.setPath).listFiles();
			for(File element : theFiles)
			{
				
				if(element.getName().contains(".node"))
					dirNodes += ", "+element.getName().replace(".node", "");
			}
			for(Object element : Neuromancer.nodes.values().toArray())
			{
				Node forNode = (Node)element;
				activeNodes += ", "+forNode.nodeName;
			}
			if(activeNodes.equals(""))
				activeNodes = "none";
			if(dirNodes.equals(""))
				dirNodes = "none";
			Neuromancer.speechSynth.speak("Available nodes: "+dirNodes+". Loaded nodes: "+activeNodes+". These nodes exist within "+Neuromancer.theSet.setName);
			break;
		//A verb was found but not recognized
		default:
			System.err.println("[ACT] \""+actionGuess+"\" could not be handled!");
			Neuromancer.speechSynth.speak(actionGuess+" doesn't have any valid actions!");
			break;
		}
	}
	
	public static void actOnRaw(String rawInput) throws Exception
	{
		act(RefinedVoice.refineVoice(rawInput));
	}
	
	private static int findFirst(String input, String type)
	{
		String[] words = RefinedVoice.cut(input, " ");
		int toReturn = 0;
		for(String word : words)
		{
			try{
				byte index = 0;
				for(String part : Thesaurus.getPartsOfSpeech(word))
				{
					if(index == 4)
						break;
					System.out.println(part+", "+type);
					if(part.equals(type))
					{
						return toReturn;
					}
					index++;
				}
			}catch(Exception e){}
			toReturn++;
		}
		return -1;
	}
}
